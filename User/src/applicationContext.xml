<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
	
	<!-- 配置了一个数据库连接池 -->
	<bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver"/>
        <property name="url" value="jdbc:sqlserver://127.0.0.1:1433;database=AssetDB"/>
        <property name="username" value="sa"/>
        <property name="password" value="123456"/>
    </bean>
    
    <!-- Spring提供的一个事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/><!-- 必须引用数据库连接池 -->
    </bean>
    
    <!-- Spring的事务增强，主要配置事务的属性 -->
    <tx:advice id="txAdvice" transaction-manager="txManager"><!-- 引用事务管理器 -->
        <tx:attributes>
        	<tx:method name="add*" propagation="REQUIRED"/><!-- 所有以add开头的方法，都必须在一个事务中执行 -->
        	<tx:method name="remove*" propagation="REQUIRED"/>
        	<tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="get*" read-only="true"/><!-- 所以以get开头的方法，都必须只读，也就是不能做增、删、改操作 -->
        </tx:attributes>
    </tx:advice>

	    
    <aop:config>
    	<!-- 配置切入点 ，expression是一种aspectj语法的表达式 -->
        <aop:pointcut id="allServiceMethod" expression="execution(* service.*.*(..))"/>
        <!-- 配置通知 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allServiceMethod"/>
    </aop:config>

    
	
	<!-- MyBatis的SqlSession工厂类 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  <property name="dataSource" ref="myDataSource" />
	</bean>
	
	<!-- 控制器部分 -->
	<bean id="OperatorAction" class="web.OperatorAction" scope="prototype">
		<property name="OperatorService" ref="OperatorService"/>
	</bean>
	<bean id="EmployeeAction" class="web.EmployeeAction" scope="prototype">
		<property name="EmployeeService" ref="EmployeeService"/>
	</bean>
	
	<bean id="CategoryAction" class="web.CategoryAction" scope="prototype">
		<property name="CategoryService" ref="CategoryService"/>
	</bean>
	<bean id="AssetAction" class="web.AssetAction" scope="prototype">
		<property name="AssetService" ref="AssetService"/>
	</bean>
	
	<!-- 业务层部分 -->
	<bean id="OperatorService" class="service.OperatorService">
		<property name="OperatorDao" ref="OperatorDao"/>
	</bean>
	<bean id="EmployeeService" class="service.EmployeeService">
		<property name="EmployeeDao" ref="EmployeeDao"></property>
	</bean>
	<bean id="CategoryService" class="service.CategoryService">
		<property name="CategoryDao" ref="CategoryDao"></property>
	</bean>
	
	<bean id="AssetService" class="service.AssetService">
		<property name="AssetDao" ref="AssetDao"></property>
	</bean>
	
	
	<!-- 数据访问层部分 -->
	<bean id="OperatorDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
		<property name="mapperInterface" value="dao.OperatorDao"/>
	</bean>
	<bean id="EmployeeDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
		<property name="mapperInterface" value="dao.EmployeeDao"/>
	</bean>
	<bean id="CategoryDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
		<property name="mapperInterface" value="dao.CategoryDao"/>
	</bean>
	
	<bean id="AssetDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
		<property name="mapperInterface" value="dao.AssetDao"/>
	</bean>
</beans>
